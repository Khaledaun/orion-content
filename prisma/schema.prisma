generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime? @db.Timestamp(6)
  Account       Account[]
  Session       Session[]

  @@map("users")
}

model Site {
  id         String        @id @default(cuid())
  key        String        @unique
  name       String
  timezone   String        @default("UTC")
  publisher  String?
  locales    Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  categories Category[]
  strategy   SiteStrategy?
  topics     Topic[]

  @@map("sites")
}

model Category {
  id        String   @id @default(cuid())
  siteId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  topics    Topic[]

  @@map("categories")
}

model Week {
  id        String     @id @default(cuid())
  isoWeek   String     @unique
  status    WeekStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  topics    Topic[]

  @@map("weeks")
}

model Topic {
  id         String   @id @default(cuid())
  weekId     String
  siteId     String
  categoryId String
  title      String
  angle      String?
  score      Float?
  approved   Boolean  @default(false)
  flags      Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  site       Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  week       Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)

  @@map("topics")
}

model Connection {
  id        String   @id @default(cuid())
  kind      String   @unique
  dataEnc   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("connections")
}

model JobRun {
  id        String    @id @default(cuid())
  jobType   String
  startedAt DateTime
  endedAt   DateTime?
  ok        Boolean   @default(false)
  logUrl    String?
  notes     String?
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("job_runs")
}

model SiteStrategy {
  id        String   @id @default(cuid())
  siteId    String   @unique
  strategy  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("site_strategies")
}

model GlobalRulebook {
  id        String   @id @default(cuid())
  version   Int
  rules     Json
  sources   Json
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("global_rulebooks")
}

model RulebookVersion {
  id        String   @id @default(cuid())
  version   Int
  rules     Json
  sources   Json
  notes     String?
  createdAt DateTime @default(now())

  @@map("rulebook_versions")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum WeekStatus {
  PENDING
  APPROVED
}
