
name: Golden Standard Rule Book - Bi-Monthly Update

on:
  schedule:
    # Run on 1st and 15th of every month at 02:00 UTC
    - cron: '0 2 1,15 * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if validation fails'
        type: boolean
        default: false
      dry_run:
        description: 'Dry run mode - no actual updates'
        type: boolean
        default: false

jobs:
  update-rulebook:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd python
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set environment variables
      run: |
        echo "ORION_BASE_URL=${{ secrets.ORION_BASE_URL }}" >> $GITHUB_ENV
        echo "ORION_CONSOLE_TOKEN=${{ secrets.ORION_CONSOLE_TOKEN }}" >> $GITHUB_ENV
        echo "PERPLEXITY_ENABLED=${{ secrets.PERPLEXITY_ENABLED || 'false' }}" >> $GITHUB_ENV
        echo "PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}" >> $GITHUB_ENV
        echo "PERPLEXITY_TOPICS=${{ vars.PERPLEXITY_TOPICS || 'seo,eeat,aio,ai-search' }}" >> $GITHUB_ENV
        
    - name: Test API connectivity
      run: |
        cd python
        python -c "
        from orion.api_client import client
        try:
            health = client.health_check()
            print(f'‚úÖ API Health: {health}')
        except Exception as e:
            print(f'‚ùå API Connection Failed: {e}')
            exit(1)
        "
        
    - name: Fetch current rulebook
      id: current_rulebook
      run: |
        cd python
        python -c "
        import json, sys
        from orion.api_client import client
        from orion.config import config
        
        try:
            response = client.session.get(f'{config.orion_base_url}/api/rulebook')
            response.raise_for_status()
            current = response.json()
            
            with open('current_rulebook.json', 'w') as f:
                json.dump(current, f, indent=2)
                
            print(f'current_version={current.get(\"version\", 0)}')
            print(f'‚úÖ Current rulebook version: {current.get(\"version\", 0)}')
        except Exception as e:
            print(f'‚ùå Failed to fetch current rulebook: {e}')
            sys.exit(1)
        " >> $GITHUB_OUTPUT
        
    - name: Research rulebook updates
      id: research
      run: |
        cd python
        python -c "
        import json, sys
        from orion.research.perplexity_client import perplexity_client
        from orion.research.update_rulebook import rulebook_updater
        
        print('üîç Fetching rulebook research updates...')
        
        try:
            research_data = perplexity_client.fetch_rulebook_updates()
            validation = perplexity_client.validate_research_quality(research_data)
            
            with open('research_data.json', 'w') as f:
                json.dump(research_data, f, indent=2)
                
            with open('research_validation.json', 'w') as f:
                json.dump(validation, f, indent=2)
            
            print(f'‚úÖ Research completed')
            print(f'Confidence: {research_data.get(\"confidence_score\", 0)}')
            print(f'Valid: {validation.get(\"valid\", False)}')
            print(f'Recommendation: {validation.get(\"recommendation\", \"unknown\")}')
            
            # Set outputs for next steps
            print(f'research_valid={validation.get(\"valid\", False)}')
            print(f'research_confidence={research_data.get(\"confidence_score\", 0)}')
            
        except Exception as e:
            print(f'‚ùå Research failed: {e}')
            sys.exit(1)
        " >> $GITHUB_OUTPUT
        
    - name: Generate updated rulebook
      id: update_rulebook
      run: |
        cd python
        python -c "
        import json, sys
        from orion.research.update_rulebook import rulebook_updater
        
        print('üìù Generating updated rulebook...')
        
        try:
            # Load current rulebook
            with open('current_rulebook.json', 'r') as f:
                current = json.load(f)
                
            current_rules = current.get('rules', {})
            
            # Generate update
            update_result = rulebook_updater.update_rulebook(current_rules)
            
            with open('updated_rulebook.json', 'w') as f:
                json.dump(update_result, f, indent=2)
                
            # Generate diff
            import difflib
            current_str = json.dumps(current_rules, indent=2, sort_keys=True)
            updated_str = json.dumps(update_result['rules'], indent=2, sort_keys=True)
            
            diff = list(difflib.unified_diff(
                current_str.splitlines(keepends=True),
                updated_str.splitlines(keepends=True),
                fromfile='current_rulebook',
                tofile='updated_rulebook',
                n=3
            ))
            
            with open('rulebook_diff.txt', 'w') as f:
                f.writelines(diff)
                
            print(f'‚úÖ Updated rulebook generated')
            print(f'Version notes: {update_result.get(\"version_notes\", \"No notes\")}')
            
            has_changes = len(diff) > 0
            print(f'has_changes={has_changes}')
            
        except Exception as e:
            print(f'‚ùå Rulebook update failed: {e}')
            sys.exit(1)
        " >> $GITHUB_OUTPUT
        
    - name: Create artifacts
      run: |
        mkdir -p artifacts
        
        # Copy all generated files to artifacts
        cp python/current_rulebook.json artifacts/ 2>/dev/null || echo "No current rulebook"
        cp python/research_data.json artifacts/ 2>/dev/null || echo "No research data"  
        cp python/research_validation.json artifacts/ 2>/dev/null || echo "No validation"
        cp python/updated_rulebook.json artifacts/ 2>/dev/null || echo "No updated rulebook"
        cp python/rulebook_diff.txt artifacts/ 2>/dev/null || echo "No diff"
        
        # Create summary
        echo "# Golden Standard Rule Book Update Summary" > artifacts/update_summary.md
        echo "" >> artifacts/update_summary.md
        echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> artifacts/update_summary.md
        echo "**Workflow:** ${{ github.workflow }}" >> artifacts/update_summary.md
        echo "**Run ID:** ${{ github.run_id }}" >> artifacts/update_summary.md
        echo "" >> artifacts/update_summary.md
        
        if [ -f "python/research_data.json" ]; then
          echo "**Research Status:** ‚úÖ Completed" >> artifacts/update_summary.md
          python -c "
          import json
          with open('python/research_data.json') as f:
              data = json.load(f)
          print(f'**Confidence Score:** {data.get(\"confidence_score\", \"N/A\")}')
          print(f'**Research Method:** {data.get(\"research_method\", \"N/A\")}')
          " >> artifacts/update_summary.md
        else
          echo "**Research Status:** ‚ùå Failed" >> artifacts/update_summary.md
        fi
        
        if [ -f "python/rulebook_diff.txt" ]; then
          echo "" >> artifacts/update_summary.md
          echo "## Changes" >> artifacts/update_summary.md
          echo "\`\`\`diff" >> artifacts/update_summary.md
          cat python/rulebook_diff.txt >> artifacts/update_summary.md
          echo "\`\`\`" >> artifacts/update_summary.md
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rulebook-update-${{ github.run_id }}
        path: artifacts/
        retention-days: 30
        
    - name: Apply rulebook update
      if: |
        (steps.research.outputs.research_valid == 'True' && steps.update_rulebook.outputs.has_changes == 'True') ||
        (github.event.inputs.force_update == 'true' && github.event_name == 'workflow_dispatch')
      run: |
        cd python
        
        # Check if this is a dry run
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "üîç DRY RUN MODE - No actual updates will be applied"
          echo "Would apply rulebook update with the following data:"
          cat updated_rulebook.json | head -20
          exit 0
        fi
        
        python -c "
        import json, sys
        from orion.api_client import client
        from orion.config import config
        
        print('üì§ Applying rulebook update...')
        
        try:
            # Load updated rulebook
            with open('updated_rulebook.json', 'r') as f:
                update_data = json.load(f)
            
            # Prepare API request
            api_payload = {
                'rules': update_data['rules'],
                'sources': update_data.get('sources', []),
                'notes': f'Automated update from GitHub Actions - {update_data.get(\"version_notes\", \"No notes\")}'
            }
            
            # Send to API
            response = client.session.post(
                f'{config.orion_base_url}/api/rulebook',
                json=api_payload
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f'‚úÖ Rulebook updated successfully')
                print(f'New version: {result.get(\"version\", \"unknown\")}')
            else:
                print(f'‚ùå API request failed: {response.status_code}')
                print(f'Response: {response.text}')
                sys.exit(1)
                
        except Exception as e:
            print(f'‚ùå Failed to apply update: {e}')
            sys.exit(1)
        "
        
    - name: Skip update notification
      if: |
        steps.research.outputs.research_valid != 'True' ||
        steps.update_rulebook.outputs.has_changes != 'True'
      run: |
        echo "‚ÑπÔ∏è Rulebook update skipped"
        echo "Research valid: ${{ steps.research.outputs.research_valid }}"
        echo "Has changes: ${{ steps.update_rulebook.outputs.has_changes }}"
        echo ""
        echo "Reasons for skipping:"
        if [ "${{ steps.research.outputs.research_valid }}" != "True" ]; then
          echo "- Research validation failed or confidence too low"
        fi
        if [ "${{ steps.update_rulebook.outputs.has_changes }}" != "True" ]; then
          echo "- No significant changes detected"
        fi
        echo ""
        echo "Check uploaded artifacts for detailed analysis."
