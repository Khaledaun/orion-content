
# Orion Content Management System - Makefile
# Provides convenient targets for development, testing, and automation

.PHONY: help install test test-all lint clean dev-server
.PHONY: gather audit publish automate automate-dry validate-config
.PHONY: test-api test-automation package zip-phase4

# Variables
SITE ?= my-site
COUNT ?= 5
TITLE ?= Test Post Title
CONTENT ?= Test post content
PYTHON_PATH = PYTHONPATH=python

# Default target
help:
	@echo "Orion Content Management System - Available Commands"
	@echo ""
	@echo "Development:"
	@echo "  install         Install Python dependencies"
	@echo "  test            Run all tests"
	@echo "  test-api        Test API connectivity"
	@echo "  test-automation Test automation pipeline"
	@echo "  lint            Run code linting"
	@echo "  clean           Clean temporary files"
	@echo "  dev-server      Start development server"
	@echo ""
	@echo "Phase 3 - CLI Tools:"
	@echo "  gather          Generate topics (SITE=my-site COUNT=30)"
	@echo "  audit           Audit WordPress posts"
	@echo "  publish         Create WordPress draft (TITLE='Post Title' CONTENT='Content')"
	@echo ""
	@echo "Phase 4 - Automation:"
	@echo "  automate        Run automation pipeline (SITE=my-site COUNT=5)"
	@echo "  automate-dry    Run automation without WordPress publishing"
	@echo "  validate-config Validate multi-site configuration"
	@echo ""
	@echo "Packaging:"
	@echo "  package         Create distributable ZIP"
	@echo "  zip-phase4      Create Phase 4 ZIP artifact"
	@echo ""
	@echo "Examples:"
	@echo "  make gather SITE=my-site COUNT=10"
	@echo "  make automate SITE=ai-news COUNT=5"
	@echo "  make test-automation"

# Installation and setup
install:
	@echo "Installing Orion dependencies..."
	cd python && python -m pip install --upgrade pip
	cd python && pip install -r requirements.txt
	@echo "✅ Dependencies installed"

# Testing
test:
	@echo "Running all tests..."
	cd python && ORION_TESTING=1 python -m pytest tests/ -v
	@echo "✅ All tests passed"

test-api:
	@echo "Testing API connectivity..."
	cd python && $(PYTHON_PATH) python -c "\
	from orion.api_client import client; \
	print('API Health:', client.health_check()); \
	print('Sites:', len(client.get_sites()))"
	@echo "✅ API test completed"

test-automation:
	@echo "Running automation pipeline tests..."
	cd python && ORION_TESTING=1 python -m pytest tests/test_automate_pipeline.py -v
	@echo "✅ Automation tests passed"

# Development tools
lint:
	@echo "Running code linting..."
	cd python && python -m flake8 orion/ --max-line-length=120 --ignore=E203,W503 || echo "⚠️  Linting warnings found"

clean:
	@echo "Cleaning temporary files..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -name "*.pyc" -delete 2>/dev/null || true
	find . -name "*.pyo" -delete 2>/dev/null || true
	rm -rf python/.pytest_cache 2>/dev/null || true
	rm -rf python/automation-logs 2>/dev/null || true
	@echo "✅ Cleanup completed"

dev-server:
	@echo "Starting Orion development server..."
	npm run dev

# Phase 3 CLI Tools
gather:
	@echo "Generating $(COUNT) topics for site: $(SITE)"
	cd python && $(PYTHON_PATH) python -m orion.gather_trends --site-key $(SITE) --count $(COUNT)

gather-dry:
	@echo "Dry run - generating $(COUNT) topics for site: $(SITE)"
	cd python && $(PYTHON_PATH) python -m orion.gather_trends --site-key $(SITE) --count $(COUNT) --dry-run

audit:
	@echo "Auditing WordPress posts..."
	cd python && $(PYTHON_PATH) python -m orion.audit.audit_wp

publish:
	@echo "Creating WordPress draft: $(TITLE)"
	cd python && $(PYTHON_PATH) python -m orion.publish.publisher_wp \
	        --title "$(TITLE)" \
	        --content "$(CONTENT)" \
	        --status draft

# Phase 4 Automation
automate:
	@echo "Running automation pipeline for site: $(SITE) ($(COUNT) topics)"
	cd python && $(PYTHON_PATH) python -m orion.automate.run_pipeline \
	        --site-key $(SITE) \
	        --topics $(COUNT) \
	        --publish 1

automate-dry:
	@echo "Running automation pipeline (dry-run) for site: $(SITE) ($(COUNT) topics)"
	cd python && $(PYTHON_PATH) python -m orion.automate.run_pipeline \
	        --site-key $(SITE) \
	        --topics $(COUNT) \
	        --publish 0

automate-wp-dry:
	@echo "Running automation pipeline (WordPress dry-run) for site: $(SITE) ($(COUNT) topics)"
	cd python && $(PYTHON_PATH) python -m orion.automate.run_pipeline \
	        --site-key $(SITE) \
	        --topics $(COUNT) \
	        --publish 1 \
	        --dry-run-wp 1

validate-config:
	@echo "Validating multi-site configuration..."
	cd python && ORION_TESTING=1 $(PYTHON_PATH) python -m orion.automate.multisite
	@echo "✅ Configuration validation completed"

list-sites:
	@echo "Configured sites:"
	cd python && ORION_TESTING=1 $(PYTHON_PATH) python -m orion.automate.multisite --list-sites

# Content generation testing
test-enrich:
	@echo "Testing content enrichment..."
	cd python && ORION_TESTING=1 $(PYTHON_PATH) python -m orion.automate.enrich \
	        --title "AI Trend #05 — Machine Learning Revolution" \
	        --angle "Exploring how ML is transforming business operations" \
	        --score 0.8 \
	        --output json

# Packaging and distribution
package:
	@echo "Creating distributable package..."
	@rm -f orion-content.zip
	zip -r orion-content.zip \
	        app/ \
	        python/ \
	        docs/ \
	        scripts/ \
	        .github/ \
	        package.json \
	        package-lock.json \
	        next.config.js \
	        tailwind.config.ts \
	        components.json \
	        tsconfig.json \
	        prisma/ \
	        components/ \
	        hooks/ \
	        lib/ \
	        Makefile \
	        .env.example \
	        -x "*/node_modules/*" "*/.next/*" "*/__pycache__/*" "*.pyc" "*/.venv/*" "*/tsconfig.tsbuildinfo"
	@echo "✅ Package created: orion-content.zip"

zip-phase4:
	@echo "Creating Phase 4 artifact..."
	@rm -f orion-phase4-automation.zip
	cd python && zip -r ../orion-phase4-automation.zip \
	        orion/automate/ \
	        tests/test_automate_pipeline.py \
	        -x "*/__pycache__/*" "*.pyc"
	zip -r orion-phase4-automation.zip \
	        .github/workflows/publish-cron.yml \
	        docs/PHASE4_AUTOMATION.md \
	        Makefile
	@echo "✅ Phase 4 artifact created: orion-phase4-automation.zip"

# Environment setup helpers
check-env:
	@echo "Checking environment variables..."
	@echo "ORION_BASE_URL: $${ORION_BASE_URL:-❌ Not set}"
	@echo "ORION_CONSOLE_TOKEN: $${ORION_CONSOLE_TOKEN:+✅ Set}$${ORION_CONSOLE_TOKEN:-❌ Not set}"
	@echo "WP_BASE_URL: $${WP_BASE_URL:-⚠️ Not set (will run dry-run)}"
	@echo "WP_USERNAME: $${WP_USERNAME:+✅ Set}$${WP_USERNAME:-⚠️ Not set (will run dry-run)}"
	@echo "WP_APP_PASSWORD: $${WP_APP_PASSWORD:+✅ Set}$${WP_APP_PASSWORD:-⚠️ Not set (will run dry-run)}"
	@echo "ORION_SITES: $${ORION_SITES:-my-site (default)}"

# All-in-one targets
setup: install check-env
	@echo "✅ Setup completed"

ci-test: install test test-automation
	@echo "✅ CI testing completed"



# Phase 6: Strategic Site Analyzer targets
.PHONY: test-analyzer run-analyzer-demo analyze-my-site analyze-competitor analyze-prospect

test-analyzer: ## Run analyzer tests
	cd python && python -m pytest tests/analyzer/ -v

run-analyzer-demo: ## Run analyzer demo
	cd python && python -m orion.analyzer.run_analyzer my-site https://example.com

analyze-my-site: ## Analyze your own site (set SITE_URL)
	cd python && python -m orion.analyzer.run_analyzer my-site $$(SITE_URL)

analyze-competitor: ## Analyze competitor site (set COMPETITOR_URL)
	cd python && python -m orion.analyzer.run_analyzer competitor $$(COMPETITOR_URL)

analyze-prospect: ## Analyze prospect site (set PROSPECT_URL)
	cd python && python -m orion.analyzer.run_analyzer prospect $$(PROSPECT_URL)


# Phase 6: Strategic Site Analyzer targets
.PHONY: test-analyzer analyze analyze-all
.PHONY: analyze-my-site analyze-competitor analyze-prospect
.PHONY: analyzer-help analyzer-demo

# Variables for analyzer
SITE_URL ?= https://example.com
COMPETITOR_URL ?= https://competitor.example.com
PROSPECT_URL ?= https://prospect.example.com
ANALYZER_OUTPUT ?= ./analysis-reports
MAX_PAGES ?= 5
USE_LLM ?= false
VERBOSE ?= false

test-analyzer: ## Run all analyzer tests with validation
	@echo "Running Phase 6 Strategic Site Analyzer tests..."
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m pytest tests/analyzer/ -v
	@echo "✅ All analyzer tests passed"

analyze: ## Quick analysis (mode and URL required: make analyze MODE=my-site URL=https://example.com)
	@if [ -z "$(MODE)" ] || [ -z "$(URL)" ]; then \
		echo "❌ Usage: make analyze MODE=my-site|competitor|prospect URL=https://example.com"; \
		echo "   Optional: MAX_PAGES=10 USE_LLM=true VERBOSE=true"; \
		exit 1; \
	fi
	@echo "Running $(MODE) analysis for $(URL)"
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m orion.analyzer.run_analyzer \
		$(MODE) $(URL) \
		--max-pages $(MAX_PAGES) \
		$(if $(filter true,$(USE_LLM)),--use-llm,) \
		$(if $(filter true,$(VERBOSE)),--verbose,) \
		--output $(ANALYZER_OUTPUT)

analyze-all: ## Run analysis for all three modes on example sites
	@echo "Running comprehensive analysis across all modes..."
	@make analyze MODE=my-site URL=https://example.com
	@make analyze MODE=competitor URL=https://competitor.example.com  
	@make analyze MODE=prospect URL=https://prospect.example.com
	@echo "✅ All analyses completed. Check $(ANALYZER_OUTPUT)/ directory"

analyze-my-site: ## Analyze your own site (SITE_URL=https://yoursite.com)
	@echo "Analyzing your site: $(SITE_URL)"
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m orion.analyzer.run_analyzer \
		my-site $(SITE_URL) \
		--max-pages $(MAX_PAGES) \
		$(if $(filter true,$(USE_LLM)),--use-llm,) \
		$(if $(filter true,$(VERBOSE)),--verbose,) \
		--output $(ANALYZER_OUTPUT)

analyze-competitor: ## Analyze competitor site (COMPETITOR_URL=https://competitor.com)
	@echo "Analyzing competitor: $(COMPETITOR_URL)"
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m orion.analyzer.run_analyzer \
		competitor $(COMPETITOR_URL) \
		--max-pages $(MAX_PAGES) \
		$(if $(filter true,$(USE_LLM)),--use-llm,) \
		$(if $(filter true,$(VERBOSE)),--verbose,) \
		--output $(ANALYZER_OUTPUT)

analyze-prospect: ## Analyze prospect site (PROSPECT_URL=https://prospect.com)
	@echo "Analyzing prospect: $(PROSPECT_URL)"
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m orion.analyzer.run_analyzer \
		prospect $(PROSPECT_URL) \
		--max-pages $(MAX_PAGES) \
		$(if $(filter true,$(USE_LLM)),--use-llm,) \
		$(if $(filter true,$(VERBOSE)),--verbose,) \
		--output $(ANALYZER_OUTPUT)

analyzer-help: ## Show analyzer usage examples
	@echo "Phase 6 Strategic Site Analyzer - Usage Examples"
	@echo ""
	@echo "Basic Analysis:"
	@echo "  make analyze MODE=my-site URL=https://yoursite.com"
	@echo "  make analyze MODE=competitor URL=https://competitor.com"
	@echo "  make analyze MODE=prospect URL=https://prospect.com"
	@echo ""
	@echo "Advanced Options:"
	@echo "  make analyze MODE=my-site URL=https://yoursite.com MAX_PAGES=10 USE_LLM=true VERBOSE=true"
	@echo "  make analyze-all  # Run all three modes"
	@echo ""
	@echo "Specific Mode Analysis:"
	@echo "  make analyze-my-site SITE_URL=https://yoursite.com"
	@echo "  make analyze-competitor COMPETITOR_URL=https://competitor.com MAX_PAGES=15"
	@echo "  make analyze-prospect PROSPECT_URL=https://prospect.com USE_LLM=true"
	@echo ""
	@echo "Testing:"
	@echo "  make test-analyzer  # Run all tests with schema validation"
	@echo ""
	@echo "Environment Variables:"
	@echo "  ORION_CONSOLE_TOKEN - Required for analysis (or 'test-token' for demo)"

analyzer-demo: ## Run analyzer demonstration
	@echo "Running Phase 6 Strategic Site Analyzer Demo"
	@echo "============================================="
	@echo ""
	@echo "1. Testing CLI help..."
	cd python && ORION_CONSOLE_TOKEN="test-token" python -m orion.analyzer.run_analyzer --help | head -n 10
	@echo ""
	@echo "2. Running my-site analysis..."
	@make analyze MODE=my-site URL=https://example.com VERBOSE=true
	@echo ""
	@echo "3. Running competitor analysis..."
	@make analyze MODE=competitor URL=https://example.com
	@echo ""
	@echo "4. Running prospect analysis..."
	@make analyze MODE=prospect URL=https://example.com
	@echo ""
	@echo "✅ Demo completed! Check analysis-reports/ directory for outputs"

# Phase 6: Strategic Site Analyzer targets
.PHONY: test-analyzer analyze analyze-all
.PHONY: analyze-my-site analyze-competitor analyze-prospect
.PHONY: analyzer-help analyzer-demo

# Variables for analyzer
SITE_URL ?= https://example.com
COMPETITOR_URL ?= https://competitor.example.com
PROSPECT_URL ?= https://prospect.example.com
ANALYZER_OUTPUT ?= ./analysis-reports
MAX_PAGES ?= 5
USE_LLM ?= false
VERBOSE ?= false

test-analyzer: ## Run all analyzer tests with validation
	@echo "Running Phase 6 Strategic Site Analyzer tests..."
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m pytest tests/analyzer/ -v
	@echo "✅ All analyzer tests passed"

analyze: ## Quick analysis (mode and URL required: make analyze MODE=my-site URL=https://example.com)
	@if [ -z "$(MODE)" ] || [ -z "$(URL)" ]; then \
		echo "❌ Usage: make analyze MODE=my-site|competitor|prospect URL=https://example.com"; \
		echo "   Optional: MAX_PAGES=10 USE_LLM=true VERBOSE=true"; \
		exit 1; \
	fi
	@echo "Running $(MODE) analysis for $(URL)"
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m orion.analyzer.run_analyzer \
		$(MODE) $(URL) \
		--max-pages $(MAX_PAGES) \
		$(if $(filter true,$(USE_LLM)),--use-llm,) \
		$(if $(filter true,$(VERBOSE)),--verbose,) \
		--output $(ANALYZER_OUTPUT)

analyze-all: ## Run analysis for all three modes on example sites
	@echo "Running comprehensive analysis across all modes..."
	@make analyze MODE=my-site URL=https://example.com
	@make analyze MODE=competitor URL=https://competitor.example.com  
	@make analyze MODE=prospect URL=https://prospect.example.com
	@echo "✅ All analyses completed. Check $(ANALYZER_OUTPUT)/ directory"

analyze-my-site: ## Analyze your own site (SITE_URL=https://yoursite.com)
	@echo "Analyzing your site: $(SITE_URL)"
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m orion.analyzer.run_analyzer \
		my-site $(SITE_URL) \
		--max-pages $(MAX_PAGES) \
		$(if $(filter true,$(USE_LLM)),--use-llm,) \
		$(if $(filter true,$(VERBOSE)),--verbose,) \
		--output $(ANALYZER_OUTPUT)

analyze-competitor: ## Analyze competitor site (COMPETITOR_URL=https://competitor.com)
	@echo "Analyzing competitor: $(COMPETITOR_URL)"
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m orion.analyzer.run_analyzer \
		competitor $(COMPETITOR_URL) \
		--max-pages $(MAX_PAGES) \
		$(if $(filter true,$(USE_LLM)),--use-llm,) \
		$(if $(filter true,$(VERBOSE)),--verbose,) \
		--output $(ANALYZER_OUTPUT)

analyze-prospect: ## Analyze prospect site (PROSPECT_URL=https://prospect.com)
	@echo "Analyzing prospect: $(PROSPECT_URL)"
	cd python && ORION_CONSOLE_TOKEN="${ORION_CONSOLE_TOKEN:-test-token}" python -m orion.analyzer.run_analyzer \
		prospect $(PROSPECT_URL) \
		--max-pages $(MAX_PAGES) \
		$(if $(filter true,$(USE_LLM)),--use-llm,) \
		$(if $(filter true,$(VERBOSE)),--verbose,) \
		--output $(ANALYZER_OUTPUT)

analyzer-help: ## Show analyzer usage examples
	@echo "Phase 6 Strategic Site Analyzer - Usage Examples"
	@echo ""
	@echo "Basic Analysis:"
	@echo "  make analyze MODE=my-site URL=https://yoursite.com"
	@echo "  make analyze MODE=competitor URL=https://competitor.com"
	@echo "  make analyze MODE=prospect URL=https://prospect.com"
	@echo ""
	@echo "Advanced Options:"
	@echo "  make analyze MODE=my-site URL=https://yoursite.com MAX_PAGES=10 USE_LLM=true VERBOSE=true"
	@echo "  make analyze-all  # Run all three modes"
	@echo ""
	@echo "Specific Mode Analysis:"
	@echo "  make analyze-my-site SITE_URL=https://yoursite.com"
	@echo "  make analyze-competitor COMPETITOR_URL=https://competitor.com MAX_PAGES=15"
	@echo "  make analyze-prospect PROSPECT_URL=https://prospect.com USE_LLM=true"
	@echo ""
	@echo "Testing:"
	@echo "  make test-analyzer  # Run all tests with schema validation"
	@echo ""
	@echo "Environment Variables:"
	@echo "  ORION_CONSOLE_TOKEN - Required for analysis (or 'test-token' for demo)"

analyzer-demo: ## Run analyzer demonstration
	@echo "Running Phase 6 Strategic Site Analyzer Demo"
	@echo "============================================="
	@echo ""
	@echo "1. Testing CLI help..."
	cd python && ORION_CONSOLE_TOKEN="test-token" python -m orion.analyzer.run_analyzer --help | head -n 10
	@echo ""
	@echo "2. Running my-site analysis..."
	@make analyze MODE=my-site URL=https://example.com VERBOSE=true
	@echo ""
	@echo "3. Running competitor analysis..."
	@make analyze MODE=competitor URL=https://example.com
	@echo ""
	@echo "4. Running prospect analysis..."
	@make analyze MODE=prospect URL=https://example.com
	@echo ""
	@echo "✅ Demo completed! Check analysis-reports/ directory for outputs"
