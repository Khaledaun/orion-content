export const dynamic = "force-dynamic";
export const runtime = "nodejs";
import NextAuth from "next-auth";
import Credentials from "next-auth/providers/credentials";
import { z } from "zod";
import bcrypt from "bcryptjs";
import { prisma } from "@/lib/prisma";

const credentialsSchema = z.object({
  email: z.string().email(),
  password: z.string().min(1)
});

const handler = NextAuth({
  pages: {
    signIn: "/login"
  },
  session: {
    strategy: "jwt" // simpler + avoids DB session dependency
  },
  providers: [
    Credentials({
      name: "Demo",
      credentials: {
        email: { label: "Email", type: "text", placeholder: "you@example.com" },
        password: { label: "Password", type: "password" }
      },
      authorize: async (raw) => {
        const parsed = credentialsSchema.safeParse(raw ?? {});
        if (!parsed.success) return null;
        const { email, password } = parsed.data;

        const user = await prisma.user.findUnique({ where: { email } });
        if (!user || !user.passwordHash) return null;

        const ok = await bcrypt.compare(password, user.passwordHash);
        if (!ok) return null;

        // minimal user object returned to NextAuth
        return { id: user.id, email: user.email, name: user.name ?? null };
      }
    })
  ],
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = (user as any).id;
        token.email = user.email;
        token.name = user.name;
      }
      return token;
    },
    async session({ session, token }) {
      (session as any).user = {
        id: (token as any).id,
        email: token.email,
        name: token.name
      };
      return session;
    }
  }
});

export { handler as GET, handler as POST };
